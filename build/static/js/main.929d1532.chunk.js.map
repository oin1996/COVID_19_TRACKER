{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryList/CountryList.jsx","components/Footer/Footer.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","index.js","components/CountryList/CountryList.module.css","components/Footer/Footer.module.css","components/Header/Header.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","infected","CardContent","Typography","color","gutterBottom","variant","varaint","start","end","value","duration","separator","Date","toDateString","app_url","fetchData","country","a","changeCountryUrl","axios","get","modifiedData","console","log","fetchDailyData","updatedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApiData","lineChartValue","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","lineChart","length","barChart","options","legend","display","title","text","style","justifyContent","width","marginTop","marginBottom","CountryList","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPI","FormControl","NativeSelect","defaultValue","fontWeight","onChange","event","target","i","key","Footer","footer","Header","header","App","state","fetchedData","setState","getData","this","JSON","stringify","Styles","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.929d1532.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport styles from './Cards.module.css';\n\nconst Cards =({data:{confirmed,recovered,deaths,lastUpdate}})=>{\n    if(!confirmed){\n        return 'Loading....';\n    }\n    return(\n       <div className={styles.container}>\n           <Grid container spacing={3} justify=\"center\">\n               <Grid item component={Card} xs={12} md={3} className={styles.infected}>\n                   <CardContent>\n                       <Typography color=\"textSecondary\" gutterBottom variant=\"h5\" component=\"h2\">Infected</Typography>\n                       <Typography varaint=\"h5\"> \n                        <CountUp\n                            start={0}\n                            end={confirmed.value}\n                            duration= {4}\n                            separator=\",\"\n                        />\n                       </Typography>\n                       <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                   </CardContent>\n               </Grid>\n               <Grid item component={Card} xs={12} md={3} className={styles.recovered}>\n                   <CardContent>\n                       <Typography color=\"textSecondary\" gutterBottom variant=\"h5\" component=\"h2\">Recoveries</Typography>\n                       <Typography varaint=\"h5\">\n                        <CountUp\n                            start={0}\n                            end={recovered.value}\n                            duration= {4}\n                            separator=\",\"\n                        />\n                       </Typography>\n                       <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                   </CardContent>\n               </Grid>\n               <Grid item component={Card} xs={12} md={3} className={styles.deaths}>\n                   <CardContent>\n                       <Typography color=\"textSecondary\" gutterBottom variant=\"h5\" component=\"h2\"> Deaths</Typography>\n                       <Typography varaint=\"h5\">\n                        <CountUp\n                            start={0}\n                            end={deaths.value}\n                            duration= {4}\n                            separator=\",\"\n                        />\n                       </Typography>\n                       <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                   </CardContent>\n               </Grid>\n           </Grid>\n       </div>\n    )\n\n}\n\nexport default Cards ;","import axios from 'axios';\n\nconst app_url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async(country)=>{\n    let changeCountryUrl = app_url;\n\n    if(country){\n        changeCountryUrl = `${app_url}/countries/${country}`;\n    }\n    try{\n        const {data: {confirmed,recovered,deaths,lastUpdate}}= await axios.get(changeCountryUrl);\n        const modifiedData = {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        }\n        return modifiedData;\n    } catch(error){\n        console.log('error',error)\n    }\n\n    // try{\n    //     const {data: {confirmed,recovered,deaths,lastUpdate}}= await axios.get(app_url);\n    //     const modifiedData = {\n    //         confirmed,\n    //         recovered,\n    //         deaths,\n    //         lastUpdate,\n    //     }\n    //     return modifiedData;\n    // } catch(error){\n    //     console.log('error',error)\n\n    // }\n}\n\nexport const fetchDailyData = async()=>{\n    try{\n        const {data} = await axios.get(`${app_url}/daily`);\n        const updatedData = data.map((dailyData)=>({\n            confirmed:dailyData.confirmed.total,\n            deaths:dailyData.deaths.total,\n            date:dailyData.reportDate\n        }))\n        return updatedData;\n    }catch(error){\n        console.log('error fetch daily',error)\n    }\n\n}\n\n\nexport const fetchCountries = async()=>{\n    try{\n        const {data:{countries}} = await axios.get(`${app_url}/countries`);\n        return countries.map((country)=>country.name)\n    }catch(error){\n        console.log(error)\n    }\n}","import React ,{ useState,useEffect }from 'react';\nimport {fetchDailyData} from '../../api/index';\nimport {Line , Bar} from 'react-chartjs-2';\n\n    const Chart = ({data:{ confirmed, recovered, deaths },country})=>{\n        const [dailyData,setDailyData]= useState([]);\n\n    useEffect(()=>{\n        const fetchApiData = async()=>{\n            setDailyData(await fetchDailyData())\n        }\n        fetchApiData();    \n    });\n\n    const lineChartValue = {\n        labels: dailyData.map(({date})=> date),\n        datasets: [\n            {\n            label: 'Infected',\n            fill: false,\n            lineTension: 0.5,\n            backgroundColor: 'rgba(0, 0, 225, 0.5)',\n            borderColor: 'rgb(128, 179, 255)',\n            borderWidth: 1,\n            data: dailyData.map(({confirmed})=> confirmed)\n            },{\n                label: 'Deaths',\n                fill: false,\n                lineTension: 0.5,\n                backgroundColor: 'rgba(225, 0, 0, 0.5)',\n                borderColor: 'rgb(255, 128, 128)',\n                borderWidth: 1,\n                data: dailyData.map(({deaths})=> deaths)\n            }\n        ]\n    }\n\n    const lineChart = (\n        dailyData.length ? \n        (<Line\n            data={lineChartValue}\n        />)\n        : null\n    );\n\n    const barChart= (\n        confirmed ?\n        ( \n            <Bar\n            data={{\n              labels: ['Infected', 'Recovered', 'Deaths'],\n              datasets: [\n                {\n                  label: 'People',\n                  backgroundColor: ['rgb(128, 179, 255)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                  data: [confirmed.value, recovered.value, deaths.value],\n                },\n              ],\n            }}\n            options={{\n              legend: { display: false },\n              title: { display: true, text: `Covid Status Of ${country}` },\n            }}\n          />\n        ):null\n    );\n\n   \n    return(\n        <div style={{display:'flex',justifyContent:'center',width:'55%',marginTop:'5px',marginBottom:'30px'}}>\n            {country ? barChart:lineChart}\n        </div>\n    )\n}\n\nexport default Chart ;","import React,{useState,useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryList.module.css';\nimport {fetchCountries} from '../../api/index';\n\n\nconst CountryList = ({handleCountryChange})=>{\n    const [fetchedCountries,setFetchedCountries] = useState([])\n\n    useEffect(()=>{\n        const fetchAPI = async()=>{\n            setFetchedCountries(await fetchCountries())\n        }\n        fetchAPI()\n        // console.log('countries',fetchedCountries)\n    });\n    \n\n    return(\n        <FormControl className={styles.container}>\n            <NativeSelect defaultValue=\"\" style={{color:'#00264d',fontWeight:'bold'}} onChange={(event)=>{handleCountryChange(event.target.value)}}>\n                <option value=\"\">Country List</option>\n                {fetchedCountries.map((country,i)=>\n                <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n\n    )\n}\n\nexport default CountryList ;","import React from 'react';\nimport styles from './Footer.module.css'\n\nconst Footer = ()=>{\n    return(\n        <div className={styles.footer}>Developed by OindrilaGhosh@27</div>\n    ); \n}\n\nexport default Footer;","import React from 'react';\nimport styles from './Header.module.css';\n\nconst Header=()=>{\n    return(\n        <div className={styles.header}>\n           COVID-19 TRACKER\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nimport {Cards,Chart,CountryList,Footer,Header} from './components';\nimport Styles from './App.module.css';\nimport {fetchData} from './api';\n\n\nclass App extends React.Component {\n  state = {\n    data : {},\n    country:'',\n  }\n\n\n  handleCountryChange=async(country)=>{\n    const fetchedData = await fetchData(country);\n    console.log(\"selected country\",fetchedData)\n    this.setState({data:fetchedData,country:country})\n  }\n\n  async componentDidMount () {\n    const getData = await fetchData();\n    this.setState({data:getData })\n    console.log(JSON.stringify(getData));\n  }\n\n  render(){\n    const {data,country} = this.state ;\n    return(\n      <div>\n         <Header/>\n        <div className = {Styles.container}>\n          <Cards data={data}/>\n          <CountryList handleCountryChange={this.handleCountryChange}/>\n          <Chart data={data} country={country}/>\n        </div>\n        <div>\n          <Footer/>\n        </div>\n      </div>\n      \n    )\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryList_container__2mVXX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__1w0lV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}